### Como o Git funciona na pr√°tica?
O Git funciona como uma linha do tempo, onde voc√™ consegue criar v√°rios pontos de acesso para as altera√ß√µes realizadas em um projeto e pode acess√°-las quando for necess√°rio. Dessa forma, ao inv√©s de criar v√°rias pastas com v√°rias vers√µes, voc√™ vai precisar apenas de uma pasta e dentro dela vai poder criar e acessar as vers√µes do seu projeto e tudo isso pode ser feito pela linha de comando do seu terminal.

Para fazer o versionamento com Git, existem 3 conceitos principais:

#Ramifica√ß√£o (branch);
#Captura de mudan√ßas (commit);
#Mesclagem (merge);

A ramifica√ß√£o funciona como ramos do seu projeto, isso significa que o seu projeto principal fica em uma branch (ramo) que atualmente √© chamada de branch main.

A partir dela voc√™ consegue criar outros ramos, ou seja, outras branches, que possuem uma vers√£o do projeto principal e que voc√™ pode realizar modifica√ß√µes sem medo, porque n√£o vai interferir na branch main.

Anota a√≠ üìù: O projeto principal √© o que fica na branch main. √â essa branch que vai para produ√ß√£o, ou seja, fica acess√≠vel para as pessoas usu√°rias.

Ap√≥s cada altera√ß√£o ou algumas altera√ß√µes, √© importante que voc√™ informe ao Git que est√° na hora dele adicionar essas informa√ß√µes em um commit, que √© uma mensagem das modifica√ß√µes que voc√™ realizou no projeto e que cria um ponto de acesso para essas altera√ß√µes.

J√° o momento da mesclagem ou merge √© quando voc√™ precisa atualizar a sua branch com a branch main ou atualizar a branch main com as suas altera√ß√µes. Esse processo √© chamado de merge ou seja, ele mescla as altera√ß√µes.

Criando um reposit√≥rio: do git init ao git merge
Para refletir üí≠: Antes de come√ßar, o que voc√™ acha que significa um reposit√≥rio?

Um reposit√≥rio √© uma pasta no seu computador onde voc√™ pode armazenar arquivos, projetos e por a√≠ vai.

Quando estamos falando sobre versionamento, o reposit√≥rio √© uma pasta que cont√©m o seu projeto. √â dentro dessa mesma pasta que voc√™ consegue criar vers√µes, ou seja, as branches. Todo esse processo pode ser feito pelo terminal utilizando linhas de comando. Esses comandos podem variar entre tipos de reposit√≥rio:

Reposit√≥rio local: √© o reposit√≥rio no seu computador, que pode ser baixado da internet ou criado por voc√™.

Reposit√≥rio remoto: √© o reposit√≥rio que est√° acess√≠vel na internet em uma plataforma de hospedagem de c√≥digo, como por exemplo, o GitHub.

### Criando um reposit√≥rio:
#Chegou a hora de praticar os seus conhecimentos sobre o Git!

#Para isso, voc√™ vai criar um novo diret√≥rio no seu computador e realizar algumas modifica√ß√µes ü§©

#Crie uma pasta no seu computador;
#Acesse a pasta que voc√™ acabou de criar;
#Inicie o versionamento com o comando git init;
#Abra a pasta no VSCode com o comando code .;
#Crie um arquivo chamado README.md;
#Adicione o arquivo novo em staging e realize um commit. Por exemplo: git add . e git commit -m "Descreva a altera√ß√£o realizada";
#Crie uma nova branch com o comando git checkout -b. Por exemplo: git checkout -b adiciona-readme;
#Fa√ßa uma altera√ß√£o no README.md e retorne para a branch main, em seguida realize o merge das altera√ß√µes com o comando git merge nome-da-branch. Por exemplo: git merge adiciona-readme.
### Agora que voc√™ j√° criou a pasta e mergeou as altera√ß√µes, vamos avan√ßar e criar novas branches!

#Acesse a branch main e crie uma branch nova chamada atualiza-readme;
#Acesse a branch atualiza-readme e crie um arquivo chamado infos.txt;
#Adicione as altera√ß√µes em staging e realize um commit;
#Adicione seu nome e sobrenome no arquivo infos.txt;
#Adicione novamente as altera√ß√µes em staging e realize um commit;
#Crie uma branch nova a partir da branch atualiza-readme. A nova branch deve se chamar adiciona-infos;
#Acesse a branch adiciona-infos e utilize sua criatividade para escrever o passo a passo de como o versionamento funciona no README.md. Por exemplo: ‚ÄúO primeiro passo √© ter uma pasta versionada e criar um estrutura inicial e fazemos isso utilizando o comando git init. O segundo passo √© criar uma branch nova com o comando git checkout nome-da-branch ou git checkout -b nome-da-branch‚Äú, etc. Voc√™ tamb√©m pode utilizar esse momento para escrever e responder as d√∫vidas que voc6e ainda tem sobre versionamento.
#Adicione as altera√ß√µes em staging, realize o commit;
Volte para a branch atualiza-readme e realize o merge das altera√ß√µes feitas na branch adiciona-infos;
#Retorne para a branch main e realize o merge das altera√ß√µes.